// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file dimension.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message DimensionRecord
 */
export class DimensionRecord extends Message<DimensionRecord> {
  /**
   * @generated from field: DimensionRecord.DimensionKey key = 1;
   */
  key?: DimensionRecord_DimensionKey;

  /**
   * @generated from field: DimensionRecord.DimensionData data = 2;
   */
  data?: DimensionRecord_DimensionData;

  constructor(data?: PartialMessage<DimensionRecord>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "DimensionRecord";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "message", T: DimensionRecord_DimensionKey },
    { no: 2, name: "data", kind: "message", T: DimensionRecord_DimensionData },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DimensionRecord {
    return new DimensionRecord().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DimensionRecord {
    return new DimensionRecord().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DimensionRecord {
    return new DimensionRecord().fromJsonString(jsonString, options);
  }

  static equals(a: DimensionRecord | PlainMessage<DimensionRecord> | undefined, b: DimensionRecord | PlainMessage<DimensionRecord> | undefined): boolean {
    return proto3.util.equals(DimensionRecord, a, b);
  }
}

/**
 * @generated from message DimensionRecord.DimensionKey
 */
export class DimensionRecord_DimensionKey extends Message<DimensionRecord_DimensionKey> {
  /**
   * @generated from field: string protocolId = 1;
   */
  protocolId = "";

  /**
   * @generated from field: string adaptorType = 2;
   */
  adaptorType = "";

  /**
   * @generated from field: string version = 3;
   */
  version = "";

  /**
   * @generated from field: int64 timestamp = 4;
   */
  timestamp = protoInt64.zero;

  constructor(data?: PartialMessage<DimensionRecord_DimensionKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "DimensionRecord.DimensionKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "protocolId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "adaptorType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DimensionRecord_DimensionKey {
    return new DimensionRecord_DimensionKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DimensionRecord_DimensionKey {
    return new DimensionRecord_DimensionKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DimensionRecord_DimensionKey {
    return new DimensionRecord_DimensionKey().fromJsonString(jsonString, options);
  }

  static equals(a: DimensionRecord_DimensionKey | PlainMessage<DimensionRecord_DimensionKey> | undefined, b: DimensionRecord_DimensionKey | PlainMessage<DimensionRecord_DimensionKey> | undefined): boolean {
    return proto3.util.equals(DimensionRecord_DimensionKey, a, b);
  }
}

/**
 * @generated from message DimensionRecord.DimensionData
 */
export class DimensionRecord_DimensionData extends Message<DimensionRecord_DimensionData> {
  /**
   * @generated from field: map<string, DimensionRecord.DimensionData.Dimension> data = 1;
   */
  data: { [key: string]: DimensionRecord_DimensionData_Dimension } = {};

  constructor(data?: PartialMessage<DimensionRecord_DimensionData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "DimensionRecord.DimensionData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: DimensionRecord_DimensionData_Dimension} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DimensionRecord_DimensionData {
    return new DimensionRecord_DimensionData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DimensionRecord_DimensionData {
    return new DimensionRecord_DimensionData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DimensionRecord_DimensionData {
    return new DimensionRecord_DimensionData().fromJsonString(jsonString, options);
  }

  static equals(a: DimensionRecord_DimensionData | PlainMessage<DimensionRecord_DimensionData> | undefined, b: DimensionRecord_DimensionData | PlainMessage<DimensionRecord_DimensionData> | undefined): boolean {
    return proto3.util.equals(DimensionRecord_DimensionData, a, b);
  }
}

/**
 * @generated from message DimensionRecord.DimensionData.Dimension
 */
export class DimensionRecord_DimensionData_Dimension extends Message<DimensionRecord_DimensionData_Dimension> {
  /**
   * @generated from field: map<string, double> data = 1;
   */
  data: { [key: string]: number } = {};

  constructor(data?: PartialMessage<DimensionRecord_DimensionData_Dimension>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "DimensionRecord.DimensionData.Dimension";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 1 /* ScalarType.DOUBLE */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DimensionRecord_DimensionData_Dimension {
    return new DimensionRecord_DimensionData_Dimension().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DimensionRecord_DimensionData_Dimension {
    return new DimensionRecord_DimensionData_Dimension().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DimensionRecord_DimensionData_Dimension {
    return new DimensionRecord_DimensionData_Dimension().fromJsonString(jsonString, options);
  }

  static equals(a: DimensionRecord_DimensionData_Dimension | PlainMessage<DimensionRecord_DimensionData_Dimension> | undefined, b: DimensionRecord_DimensionData_Dimension | PlainMessage<DimensionRecord_DimensionData_Dimension> | undefined): boolean {
    return proto3.util.equals(DimensionRecord_DimensionData_Dimension, a, b);
  }
}

